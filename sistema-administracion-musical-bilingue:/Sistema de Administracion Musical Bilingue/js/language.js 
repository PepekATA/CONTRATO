let translations = {};
let currentLanguage = 'es';

export async function initLanguage() {
    const savedLang = localStorage.getItem('language') || 'es';
    await changeLanguage(savedLang);
}

export async function changeLanguage(lang) {
    try {
        const response = await fetch(`lang/${lang}.json`);
        translations = await response.json();
        currentLanguage = lang;
        
        localStorage.setItem('language', lang);
        updateUI();
        
        // Highlight active language button
        document.querySelectorAll('.lang-btn').forEach(btn => btn.classList.remove('active'));
        const activeLangBtn = document.getElementById(`lang-${lang}`);
        if (activeLangBtn) {
            activeLangBtn.classList.add('active');
        }
        
    } catch (error) {
        console.error('Error loading language:', error);
    }
}

function updateUI() {
    // Update main title and subtitle
    const mainTitle = document.getElementById('main-title');
    const mainSubtitle = document.getElementById('main-subtitle');
    
    if (mainTitle) mainTitle.textContent = translations.mainTitle;
    if (mainSubtitle) mainSubtitle.textContent = translations.mainSubtitle;
    
    // Update menu buttons
    const menuContainer = document.getElementById('mainMenu');
    if (menuContainer && menuContainer.children.length > 0) {
        Array.from(menuContainer.children).forEach(btn => {
            const moduleKey = btn.dataset.module;
            if (moduleKey && translations.menu && translations.menu[moduleKey]) {
                btn.textContent = translations.menu[moduleKey];
            }
        });
    }
    
    // Update all elements with data-translate attribute
    translateElements();
}

function translateElements() {
    const elements = document.querySelectorAll('[data-translate]');
    elements.forEach(element => {
        const key = element.getAttribute('data-translate');
        const translatedText = translate(key);
        
        if (translatedText && translatedText !== key) {
            element.textContent = translatedText;
        }
    });
}

export function translate(key) {
    const keys = key.split('.');
    let value = translations;
    
    for (const k of keys) {
        value = value?.[k];
    }
    
    return value || key;
}

export function getCurrentLanguage() {
    return currentLanguage;
}

// Exponer globalmente
window.changeLanguage = changeLanguage;
window.translate = translate;
```

---

## ðŸ“‹ Resumen de la Estructura Final
```
sistema-administracion-musical-bilingue/
â”‚
â”œâ”€â”€ index.html
â”‚
â”œâ”€â”€ css/
â”‚   â”œâ”€â”€ main.css
â”‚   â””â”€â”€ components.css
â”‚
â”œâ”€â”€ js/
â”‚   â”œâ”€â”€ app.js
â”‚   â”œâ”€â”€ navigation.js
â”‚   â”œâ”€â”€ language.js
â”‚   â””â”€â”€ export.js
â”‚
â”œâ”€â”€ modules/
â”‚   â”œâ”€â”€ administration/
â”‚   â”‚   â”œâ”€â”€ administration.html
â”‚   â”‚   â”œâ”€â”€ administration.js
â”‚   â”‚   â””â”€â”€ administration-template.js
â”‚   â”‚
â”‚   â”œâ”€â”€ publishing/
â”‚   â”‚   â”œâ”€â”€ publishing.html
â”‚   â”‚   â”œâ”€â”€ publishing.js
â”‚   â”‚   â””â”€â”€ publishing-template.js
â”‚   â”‚
â”‚   â”œâ”€â”€ songwriter/
â”‚   â”‚   â”œâ”€â”€ songwriter.html
â”‚   â”‚   â”œâ”€â”€ songwriter.js
â”‚   â”‚   â””â”€â”€ songwriter-template.js
â”‚   â”‚
â”‚   â”œâ”€â”€ splitsheet/
â”‚   â”‚   â”œâ”€â”€ splitsheet.html
â”‚   â”‚   â”œâ”€â”€ splitsheet.js
â”‚   â”‚   â””â”€â”€ splitsheet-template.js
â”‚   â”‚
â”‚   â”œâ”€â”€ letter/
â”‚   â”‚   â”œâ”€â”€ letter.html
â”‚   â”‚   â”œâ”€â”€ letter.js
â”‚   â”‚   â””â”€â”€ letter-template.js
â”‚   â”‚
â”‚   â””â”€â”€ help/
â”‚       â”œâ”€â”€ help.html
â”‚       â””â”€â”€ help.js
â”‚
â””â”€â”€ lang/
    â”œâ”€â”€ es.json
    â””â”€â”€ en.json